/*
* Copyright (c) 2012-2015 S-Core Co., Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * Legacy resource topic dispatcher for sys.fs.* and resource/*, remote/* events
 * This module dispatches dojo topics from new server api events
 *
 * @since: 2016.06.30
 */

define([
    'dojo/topic',
    'external/URIjs/src/URI',
    'webida-lib/util/logger/logger-client',
    'webida-lib/server-api'
], function (
    topic,
    URI,
    Logger,
    webida
) {
    'use strict';

    var logger = Logger.getSingleton();
    logger.debug = logger.log;

    // All event names that begin with '__' is now deprecated. 
    //  New Event Bus will not publish __* events to any channels 

    var LEGACY_FS_TOPIC_NAMES = {
        // events generated by sever
        addDir: 'sys.fs.dir.created',
        unlinkDir: 'sys.fs.dir.deleted',
        add:'sys.fs.file.written',  // sys.fs.file.created seems to have no effects.
        change:'sys.fs.file.written',
        unlink:'sys.fs.file.deleted',
        
        // events generated by client, as a result of api call 
        _addDir: 'sys.fs.dir.created',
        _unlinkDir: 'sys.fs.dir.deleted',
        _add:'sys.fs.file.created',
        _change:'sys.fs.file.written',
        _unlink:'sys.fs.file.deleted',
        
        // fake events generated by client, as a result of api call 
        __refresh: 'sys.fs.node.interactableChanges',
        __moved: 'sys.fs.node.moved',
        __copied: 'sys.fs.node.copied',
        __exec : 'sys.fs.node.interactableChanges'
    };

    var LEGACY_RESOURCES_TOPIC_NAMES = {
        // events generated by sever
        addDir: 'remote/directory/created',
        unlinkDir: 'remote/directory/deleted',
        add:'remote/persistence/created',
        change:'remote/persistence/updated',
        unlink:'remote/persistence/deleted',

        // events generated by client, as a result of api call 
        _addDir: 'resources/directory/created',
        _unlinkDir: 'resources/directory/deleted',
        _add:'resources/persistence/created',
        _change:'resources/persistence/updated',
        _unlink:'resources/persistence/deleted'
    };

    // we don't map 'remote' topics for now. 
    // editors 

    function WfsEvent(wfsId, type, wfsPath) {
        this.wfsId = wfsId;
        this.type = type;
        this.wfsPath = wfsPath;
    }

    WfsEvent.prototype = {
        getLegacyWfsUrl : function getLegacyWfsUrl() {
            var wfsUriPath = this.wfsId + '/' + this.wfsPath;
            var wfsUri = webida.info.serverUri.protocol('wfs').path(wfsUriPath).normalize();
            return wfsUri.toString();
        },

        getResourceWfsUrn : function getLegacyWfsUrl() {
            return 'wfs:' + '/' + this.wfsPath; // path should be absolute in urn
        },

        // reserved to next release - wfs events will have 'independent' channels per fsid
        // getEventChannelName : function getEventChannelName() {
        //     return 'server/wfs/' + this.wfsId;
        // },

        getLegacyFsTopicData : function getLegacyFsTopicData(eventType) {
            return {
                sid: eventType[0] === '_' ? webida.info.sessionId : 'out-of-session',
                url: this.getLegacyWfsUrl()
            };
        }
    };

    //See https://github.com/webida/webida-developer-guide-english/wiki/Event-System
    function dispatchLegacyResourceTopics() {
        
        // since no legacy events are using stats, we discard stats here
        var wfsEvent = new WfsEvent(arguments[0], arguments[1], arguments[2]);
        var legacyFsTopicName = LEGACY_FS_TOPIC_NAMES[wfsEvent.type];
        var legacyResourcesTopicName = LEGACY_RESOURCES_TOPIC_NAMES[wfsEvent.type];

        if (legacyFsTopicName) {
            var topicData = wfsEvent.getLegacyFsTopicData(wfsEvent.type);
            logger.debug('dispatching ' + legacyFsTopicName, topicData);
            topic.publish(legacyFsTopicName, topicData);
        }
        if (legacyResourcesTopicName) {
            var topicUrn =  wfsEvent.getResourceWfsUrn();
            logger.debug('dispatching ' + legacyResourcesTopicName, topicUrn);
            topic.publish(legacyResourcesTopicName, topicUrn);
        }
    }

    return dispatchLegacyResourceTopics;
});
