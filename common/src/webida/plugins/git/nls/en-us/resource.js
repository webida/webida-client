define({
    abort: 'Abort',
    addToStage: 'Add to Stage',
    alreadyExist: 'Warning - ${arg} \' ${name} already exists',
    alreadyUpToDate: 'Already up-to-date',
    apply: 'Apply',
    authorSpecified: 'Author is not specified',
    blamePath: 'Blame - ${rootPath}${path}',
    branchOrTag: 'Branch / Tag',
    changeIdExist: 'The Change-Id already exists.',
    checkRemoteRepository: 'Check whether the remote repository url information is valid.',
    checkoutArg: 'Do you want to checkout the ${arg} \' ${name} ?',
    checkoutFromStage: 'Checkout from Stage',
    clear: 'Clear',
    clearStash: 'Clear Stash',
    cloneFromURL: 'Clone from URL',
    close: 'Close',
    commit: 'Commit',
    commitToPush: 'Commit to Push',
    compare: 'Compare (Read Only) - ',
    continue: 'Continue',
    createBranch: 'Create branch',
    creageTag: 'Creage tag',
    currentRevision: 'Current Revision',
    deleteArg: 'Do you want to delete the ${arg} \' ${name} ?',
    diff: 'Diff - ',
    diffPreferences: 'Diff Preferences',
    directoryPath: '${file} is not a file path.',
    enterArgName: 'Enter ${arg} name',
    enterANewBranchName: 'Enter a new branch name',
    enterCommitId: 'Enter commit-id',
    enterMessage: 'Enter message',
    enterName: 'Enter Name',
    enterRemoteRepositoryArg: 'Enter remote repository ${arg}',
    everythingUpToDate: 'Everything up-to-date',
    failedToReadAFile: 'Failed to read a file ${path} (${err})',
    fetch: 'Fetch',
    fetchAndRebase: 'Fetch and Rebase',
    fetchFromRemote: 'Fetch from Remote',
    fetchedYourRepository: 'Fetched your repository list from GitHub',
    forMoreDetails: 'For more details, refer to the Git view.',
    git: 'Git',
    gitAddError: 'Git Add Error',
    gitAddSuccess: 'Git Add Success',
    gitBranchDeleteError: 'Git Branch Delete Error',
    gitBranchDeleteSuccess: 'Git Branch Delete Success',
    gitChangeIdInfo: 'Git Change-Id Info',
    gitCheckoutError: 'Git Checkout Error',
    gitCheckoutSuccess: 'Git Checkout Success',
    gitCloneError: 'Git Clone Error',
    gitCloneInfo: 'Git Clone Info',
    gitCloneSuccess: 'Git Clone Success',
    gitCommandError: 'Git Command Error',
    gitCommandSuccess: 'Git Command Success',
    gitCommitError: 'Git Commit Error',
    gitCommitSuccess: 'Git Commit Success',
    gitCommitWarning: 'Git Commit Warning',
    gitConfigureError: 'Git Configure Change Error',
    gitConfigureSuccess: 'Git Configure Setting Success',
    gitCreateError: 'Git Create Error',
    gitCreageSuccess: 'Git Creage Success',
    gitDiffInfo: 'Git Diff Info',
    gitFetchError: 'Git Fetch Error',
    gitFetchSuccess: 'Git Fetch Success',
    gitMergeAbort: 'Git Merge Abort Success',
    gitMergeConflict: 'Git Merge Conflict Warning',
    gitMergeError: 'Git Merge Error',
    gitMergeInfo: 'Git Merge Info',
    gitMergeSuccess: 'Git Merge Success',
    gitProcessing: 'git ${arg}: Processing...',
    gitPullConflict: 'Git Pull Conflict Warning',
    gitPullError: 'Git Pull Error',
    gitPullInfo: 'Git Pull Info',
    gitPullSuccess: 'Git Pull Success',
    gitPullWarning: 'Git Pull Warning',
    gitPushError: 'Git Push Error',
    gitPushInfo: 'Git Push Info',
    gitPushSuccess: 'Git Push Success',
    gitRebaseAbortError: 'Git Rebase Abort Error',
    gitRebaseAbortSuccess: 'Git Rebase Abort Success',
    gitRebaseConflictWarning: 'Git Rebase Conflict Warning',
    gitRebaseContinueError: 'Git Rebase Continue Error',
    gitRebaseContinueWarning: 'Git Rebase Continue Warning',
    gitRebaseError: 'Git Rebase Error',
    gitRebaseInfo: 'Git Rebase Info',
    gitRebaseSuccess: 'Git Rebase Success',
    gitRebaseSkipError: 'Git Rebase Skip Error',
    gitRebaseWarning: 'Git Rebase Warning',
    gitRemoveSueecss: 'Git Remove Success',
    gitRemoteError: 'Git Remote Error',
    gitRemoteSuccess: 'Git remote Success',
    gitResetCommitError: 'Git Reset to ${id} Error',
    gitResetCommitSuccess: 'Git Reset to ${id} Success',
    gitResetError: 'Git Reset Error',
    gitStashClearWarning: 'Git Stash Clear Warning',
    gitStashClearSuccess: 'Git Stash Clear Success',
    gitStashDropSuccess: 'Git Stash Drop Success',
    gitStashError: 'Git Stash Error',
    gitStashInfo: 'Git Stash Info',
    gitStashSuccess: 'Git Stash Success',
    gitStatusFailed: 'Git status failed for ${path} (${err})',
    gitSubmoduleError: 'Git Submodule Error',
    gitTagDeleteError: 'Git Tag Delete Error',
    gitTagDeleteSuccess: 'Git Tag Delete Success',
    gitUnstashClearError: 'Git Unstash Clear Error',
    gitUnstashDropError: 'Git Unstash Drop Error',
    gitUnstashError: 'Git Unstash Error',
    gitUnstashSuccess: 'Git Unstash Success',
    gitUntrackError: 'Git Untrack Error',
    gitUntrackSuccess: 'Git Untrack Success',
    gitUntrackWarning: 'Git Untrack Warning',
    hasBeenDeleted: '${path} file has been deleted.',
    hasBeenNewlyAdded: '${path} has been newly added.',
    head: 'HEAD',
    info: 'Info',
    isAlreadyUntrack: '${path} is already untracked',
    isIgnored: '${path} is ignored',
    loading: 'Loading...',
    merge: 'Merge',
    noChangeDetect: 'No changes detected',
    noDataToDisplay: '<strong>No data to display</strong>',
    noLocalChangesToSave: 'No local changes to save',
    none: 'none',
    noStashStatesExist: 'No stash states exist',
    ok: 'OK',
    processing: 'Processing...',
    pullFromRemote: 'Pull from Remote',
    pushToRemote: 'Push to Remote',
    run: 'Run',
    runGitCommand: 'Run Git Command',
    reset: 'Reset',
    resetToCommit: 'Reset to Commit',
    resetToTheCommit: 'Do you want to reset to the commit ?',
    renamePath: 'The specified path ${path} was renamed',
    remove: 'Remove',
    removeAndCheckout: 'Remove and Checkout',
    removeFromStage: 'Remove from Stage',
    removeRemoteRepository: 'Do you want to remove remote \'${name}\' repository ?',
    rebase: 'Rebase',
    selectADirectory: 'Select a Directory',
    selectADirectoryToMakeARepository: 'Select a directory to make a repository',
    selectATag: 'Select a tag',
    selectBranch: 'Select branch or enter a source ref',
    selectRemote: 'Select remote-tracking branch or enter a destination ref',
    selectedGitProject: 'Selected Git project: ',
    showFileHistory: 'Show File History - ${rootPath} ${relPath}',
    showRepositoryHistory: 'Show Repository History - ${path}',
    skip: 'Skip',
    stashChanges: 'Stash Changes',
    sucess: 'Sucess',
    unstash: 'Unstash',
    unstashChanges: 'Unstash Changes',
    untrack: 'Untrack',
    verifyTheAuthor: 'Veryfy the author information format',
    verifyTheProtocol: 'Verify the protocol. (Support http, https, git, ssh)'
});
